{"remainingRequest":"/home/gregory/Desktop/chat/src/frontend/node_modules/babel-loader/lib/index.js!/home/gregory/Desktop/chat/src/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/gregory/Desktop/chat/src/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/gregory/Desktop/chat/src/frontend/src/pages/Chat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/gregory/Desktop/chat/src/frontend/src/pages/Chat.vue","mtime":1586622750257},{"path":"/home/gregory/Desktop/chat/src/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/gregory/Desktop/chat/src/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/gregory/Desktop/chat/src/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/gregory/Desktop/chat/src/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGFwaSBmcm9tICIuLi9hcGkvYXBpIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJDaGF0IiwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgY2hhdDogewogICAgICAgIGNoYXRfaWQ6IG51bGwsCiAgICAgICAgbmFtZTogJycsCiAgICAgICAgdXNlcm5hbWVzOiBbXSwKICAgICAgICBhZG1pbjogJycKICAgICAgfSwKICAgICAgbWVzc2FnZXM6IFtdLAogICAgICBtZXNzYWdlVGV4dDogJycsCiAgICAgIGNvbm5lY3Rpb246IHt9CiAgICB9OwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCJMT0FEX1VTRVJfREFUQSIpOwogICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goIkxPQURfQUxMX1VTRVJTIik7CiAgICB0aGlzLmNvbm5lY3Rpb24gPSB0aGlzLnNldENvbm5lY3Rpb24oKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIHNlbmRNZXNzYWdlOiBmdW5jdGlvbiBzZW5kTWVzc2FnZSgpIHsKICAgICAgdmFyIG1lc3NhZ2UgPSB7CiAgICAgICAgc2VuZGVyOiB0aGlzLnVzZXJEYXRhLnVzZXJuYW1lLAogICAgICAgIGNoYXRfaWQ6IHRoaXMuY2hhdC5jaGF0X2lkLAogICAgICAgIG1ldGE6IHRoaXMuY2hhdC5uYW1lLAogICAgICAgIGRhdGU6IERhdGUubm93KCksCiAgICAgICAgc3RhdGU6IDAsCiAgICAgICAgdGV4dDogdGhpcy5tZXNzYWdlVGV4dCwKICAgICAgICBhdHRhY2hlZF9maWxlX3BhdGg6IG51bGwKICAgICAgfTsKICAgICAgY29uc29sZS5sb2coIk1lc3NhZ2UgdG8gc2VuZDogIiwgbWVzc2FnZSk7CiAgICAgIHRoaXMuY29ubmVjdGlvbi5zZW5kKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTsKICAgICAgdGhpcy5tZXNzYWdlVGV4dCA9ICIiOwogICAgICB0aGlzLm1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7CiAgICB9LAogICAgc2V0Q29ubmVjdGlvbjogZnVuY3Rpb24gc2V0Q29ubmVjdGlvbigpIHsKICAgICAgdmFyIHRoYXQgPSB0aGlzOwoKICAgICAgaWYgKHdpbmRvd1siV2ViU29ja2V0Il0pIHsKICAgICAgICB2YXIgY29ubiA9IG5ldyBXZWJTb2NrZXQoIndzOi8vbG9jYWxob3N0OjIyMjIvY29ubmVjdCIpOwoKICAgICAgICBjb25uLm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygiQ29ubmVjdGlvbiBjbG9zZWQiKTsKICAgICAgICB9OwoKICAgICAgICBjb25uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCJHb3QgbWVzc2FnZTogIiwgZXZ0KTsKICAgICAgICAgIHZhciBtZXNzYWdlQm9keSA9IEpTT04ucGFyc2UoZXZ0LmRhdGEpOwogICAgICAgICAgY29uc29sZS5sb2coIkJvZHk6ICIsIG1lc3NhZ2VCb2R5KTsKICAgICAgICAgIHRoYXQubWVzc2FnZXMucHVzaChtZXNzYWdlQm9keSk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIHRpbWVySWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gY29ubi5zZW5kKEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgbWV0YTogInBvbmciCiAgICAgICAgICB9KSk7CiAgICAgICAgfSwgMjAwMDApOwogICAgICAgIHJldHVybiBjb25uOwogICAgICB9IGVsc2UgewogICAgICAgIGFsZXJ0KCJZb3UgYXJlIGEgZnVja2luZyBsb29zZXIsIHlvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHdlYnNvY2tldHMiKTsKICAgICAgfQogICAgfSwKICAgIHNldEV4aXN0aW5nQ2hhdDogZnVuY3Rpb24gc2V0RXhpc3RpbmdDaGF0KGNvbnRhY3RJdGVtKSB7CiAgICAgIHRoaXMuY2hhdCA9IGNvbnRhY3RJdGVtOwogICAgICB2YXIgcmVzcG9uc2UgPSBhcGkuZ2V0KCdnZXRfbWVzc2FnZXMvJyArIGNvbnRhY3RJdGVtLmNoYXRfaWQpOwogICAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICAgIHRoaXMubWVzc2FnZXMgPSBbXTsKICAgICAgcmVzcG9uc2UudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQgfHwgZGF0YS5sZW5ndGggPT09IDApIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgdGhhdC5tZXNzYWdlcy5wdXNoKGl0ZW0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICBzZXROZXdDaGF0OiBmdW5jdGlvbiBzZXROZXdDaGF0KHJlY2lwaWVudE5hbWUpIHsKICAgICAgdGhpcy5jaGF0ID0gewogICAgICAgIGNoYXRfaWQ6IG51bGwsCiAgICAgICAgbmFtZTogcmVjaXBpZW50TmFtZS51c2VybmFtZSwKICAgICAgICB1c2VybmFtZXM6IFtyZWNpcGllbnROYW1lLnVzZXJuYW1lLCB0aGlzLnVzZXJEYXRhLnVzZXJuYW1lXSwKICAgICAgICBhZG1pbjogdGhpcy51c2VyRGF0YS51c2VybmFtZQogICAgICB9OwogICAgICB0aGlzLm1lc3NhZ2VzID0gW107CiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgdXNlckRhdGE6IGZ1bmN0aW9uIHVzZXJEYXRhKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5HRVRfVVNFUjsKICAgIH0sCiAgICBhbGxVc2VyczogZnVuY3Rpb24gYWxsVXNlcnMoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLkdFVF9BTExfVVNFUlM7CiAgICB9LAogICAgbmV3VXNlcnM6IGZ1bmN0aW9uIG5ld1VzZXJzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMuR0VUX0FMTF9VU0VSUy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbS51c2VybmFtZSAhPT0gX3RoaXMudXNlckRhdGEudXNlcm5hbWUgJiYgKF90aGlzLnVzZXJEYXRhLmNvbnRhY3RzID09IG51bGwgPyB0cnVlIDogIV90aGlzLnVzZXJEYXRhLmNvbnRhY3RzLmluY2x1ZGVzKGl0ZW0udXNlcm5hbWUpKTsKICAgICAgfSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["Chat.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <h1>Chat here!</h1>\n        <h3>Logged in as {{ userData.username }}</h3>\n        <div class=\"chatroom-container\">\n            <div class=\"contacts-container\">\n                <h4>My chats:</h4>\n                <!--                а вот список контактов потом дополнится не просто список имен, а еще и есть ли непрочитанные сообщения и все в этом роде-->\n                <p @click=\"setExistingChat(chatItem)\" v-for=\"chatItem in userData.chats\" :key=\"chatItem.chat_id\">{{ chatItem.name }}</p>\n            </div>\n            <div class=\"chat-screen\">\n                <div v-for=\"message in messages\" :key=\"message.text\" class=\"message-container\">\n                    <p class=\"message-sender\">From: {{ message.sender }}</p>\n                    <p class=\"message-text\">{{ message.text }}</p>\n                </div>\n                <div class=\"input-container\">\n                    <input class=\"message-input\" type=\"text\" v-model=\"messageText\">\n                    <button @click=\"sendMessage\">Send</button>\n                </div>\n            </div>\n            <div class=\"contacts-container\">\n                <h4>All users:</h4>\n                <p @click=\"setNewChat(contactItem)\" v-for=\"contactItem in newUsers\" :key=\"contactItem.username\">{{ contactItem.username }}</p>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import api from \"../api/api\";\n\n    export default {\n        name: \"Chat\",\n        data() {\n            return {\n                chat: {\n                    chat_id: null,\n                    name: '',\n                    usernames: [],\n                    admin: '',\n                },\n                messages: [],\n                messageText: '',\n                connection: {},\n            }\n        },\n        created() {\n            this.$store.dispatch(\"LOAD_USER_DATA\");\n            this.$store.dispatch(\"LOAD_ALL_USERS\");\n            this.connection = this.setConnection();\n        },\n        methods: {\n            sendMessage() {\n                const message = {\n                    sender: this.userData.username,\n                    chat_id: this.chat.chat_id,\n                    meta: this.chat.name,\n                    date: Date.now(),\n                    state: 0,\n                    text: this.messageText,\n                    attached_file_path: null,\n                };\n                console.log(\"Message to send: \", message);\n                this.connection.send(JSON.stringify(message));\n                this.messageText = \"\";\n                this.messages.push(message);\n            },\n            setConnection() {\n                const that = this;\n                if (window[\"WebSocket\"]) {\n                    const conn = new WebSocket(\"ws://localhost:2222/connect\");\n                    conn.onclose = function () {\n                        console.log(\"Connection closed\");\n                    };\n                    conn.onmessage = function (evt) {\n                        console.log(\"Got message: \", evt);\n                        let messageBody = JSON.parse(evt.data);\n                        console.log(\"Body: \", messageBody);\n                        that.messages.push(messageBody);\n                    };\n                    let timerId = setInterval(() => conn.send(JSON.stringify({meta: \"pong\"})), 20000);\n\n                    return conn;\n                }\n                else {\n                    alert(\"You are a fucking looser, your browser does not support websockets\");\n                }\n            },\n            setExistingChat(contactItem) {\n                this.chat = contactItem;\n\n                const response = api.get('get_messages/' + contactItem.chat_id);\n                const that = this;\n                this.messages = [];\n\n                response.then(data => {\n                    if (data === undefined || data.length === 0) {\n                        return;\n                    }\n                    data.forEach(item => {\n                            that.messages.push(item)\n                        }\n                    );\n                });\n            },\n            setNewChat(recipientName) {\n                this.chat = {\n                    chat_id: null,\n                    name: recipientName.username,\n                    usernames: [recipientName.username, this.userData.username],\n                    admin: this.userData.username,\n                };\n                this.messages = [];\n            }\n        },\n        computed: {\n            userData() {\n                return this.$store.getters.GET_USER;\n            },\n            allUsers() {\n                return this.$store.getters.GET_ALL_USERS;\n            },\n            newUsers() {\n                return this.$store.getters.GET_ALL_USERS.filter(item => {\n                    return item.username !== this.userData.username &&\n                        (this.userData.contacts == null ? true : !this.userData.contacts.includes(item.username))\n                });\n            }\n        },\n    }\n</script>\n\n<style scoped>\n    p {\n        padding: 0;\n        margin: 0;\n    }\n\n    .chatroom-container {\n        width: 90%;\n        margin: 0 auto;\n        display: flex;\n        flex-direction: row;\n        justify-content: center;\n    }\n    .contacts-container {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        justify-content: start;\n        border: solid blue 3px;\n        padding: 2em;\n    }\n    .chat-screen {\n        position: relative;\n        min-width: 15em;\n        display: flex;\n        margin: 0 1em;\n        flex-direction: column;\n        justify-content: start;\n        border: solid blue 3px;\n        padding: 1em 0.7em 4em;\n    }\n    .input-container {\n        position: absolute;\n        bottom: 1em;\n        height: fit-content;\n        display: flex;\n        flex-direction: row;\n        justify-content: start;\n        padding: 0.5em;\n        border: solid green 1px;\n        max-width: 90%;\n    }\n\n    .message-input {\n        max-width: 65%;\n    }\n\n    .contact-container {\n        border: green solid 1px;\n        border-radius: 7px;\n    }\n\n    .message-container {\n        text-align: left;\n        background-color: lightblue;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        padding: 10px;\n        margin: 0 0 5px 0;\n    }\n\n    .message-text {\n        border: solid 2px lightgreen;\n        background-color: white;\n        padding: 5px;\n    }\n\n    .message-sender {\n        margin: 10px;\n    }\n\n</style>"],"sourceRoot":"src/pages"}]}