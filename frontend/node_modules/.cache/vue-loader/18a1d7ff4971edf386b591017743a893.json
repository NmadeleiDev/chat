{"remainingRequest":"/home/gregory/Desktop/chat/src/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/gregory/Desktop/chat/src/frontend/src/pages/Chat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/gregory/Desktop/chat/src/frontend/src/pages/Chat.vue","mtime":1586622750257},{"path":"/home/gregory/Desktop/chat/src/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/gregory/Desktop/chat/src/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/gregory/Desktop/chat/src/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/gregory/Desktop/chat/src/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBhcGkgZnJvbSAiLi4vYXBpL2FwaSI7CgpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOiAiQ2hhdCIsCiAgICBkYXRhKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGNoYXQ6IHsKICAgICAgICAgICAgICAgIGNoYXRfaWQ6IG51bGwsCiAgICAgICAgICAgICAgICBuYW1lOiAnJywKICAgICAgICAgICAgICAgIHVzZXJuYW1lczogW10sCiAgICAgICAgICAgICAgICBhZG1pbjogJycsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG1lc3NhZ2VzOiBbXSwKICAgICAgICAgICAgbWVzc2FnZVRleHQ6ICcnLAogICAgICAgICAgICBjb25uZWN0aW9uOiB7fSwKICAgICAgICB9CiAgICB9LAogICAgY3JlYXRlZCgpIHsKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgiTE9BRF9VU0VSX0RBVEEiKTsKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgiTE9BRF9BTExfVVNFUlMiKTsKICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSB0aGlzLnNldENvbm5lY3Rpb24oKTsKICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgc2VuZE1lc3NhZ2UoKSB7CiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB7CiAgICAgICAgICAgICAgICBzZW5kZXI6IHRoaXMudXNlckRhdGEudXNlcm5hbWUsCiAgICAgICAgICAgICAgICBjaGF0X2lkOiB0aGlzLmNoYXQuY2hhdF9pZCwKICAgICAgICAgICAgICAgIG1ldGE6IHRoaXMuY2hhdC5uYW1lLAogICAgICAgICAgICAgICAgZGF0ZTogRGF0ZS5ub3coKSwKICAgICAgICAgICAgICAgIHN0YXRlOiAwLAogICAgICAgICAgICAgICAgdGV4dDogdGhpcy5tZXNzYWdlVGV4dCwKICAgICAgICAgICAgICAgIGF0dGFjaGVkX2ZpbGVfcGF0aDogbnVsbCwKICAgICAgICAgICAgfTsKICAgICAgICAgICAgY29uc29sZS5sb2coIk1lc3NhZ2UgdG8gc2VuZDogIiwgbWVzc2FnZSk7CiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5zZW5kKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTsKICAgICAgICAgICAgdGhpcy5tZXNzYWdlVGV4dCA9ICIiOwogICAgICAgICAgICB0aGlzLm1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7CiAgICAgICAgfSwKICAgICAgICBzZXRDb25uZWN0aW9uKCkgewogICAgICAgICAgICBjb25zdCB0aGF0ID0gdGhpczsKICAgICAgICAgICAgaWYgKHdpbmRvd1siV2ViU29ja2V0Il0pIHsKICAgICAgICAgICAgICAgIGNvbnN0IGNvbm4gPSBuZXcgV2ViU29ja2V0KCJ3czovL2xvY2FsaG9zdDoyMjIyL2Nvbm5lY3QiKTsKICAgICAgICAgICAgICAgIGNvbm4ub25jbG9zZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiQ29ubmVjdGlvbiBjbG9zZWQiKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBjb25uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiR290IG1lc3NhZ2U6ICIsIGV2dCk7CiAgICAgICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2VCb2R5ID0gSlNPTi5wYXJzZShldnQuZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkJvZHk6ICIsIG1lc3NhZ2VCb2R5KTsKICAgICAgICAgICAgICAgICAgICB0aGF0Lm1lc3NhZ2VzLnB1c2gobWVzc2FnZUJvZHkpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGxldCB0aW1lcklkID0gc2V0SW50ZXJ2YWwoKCkgPT4gY29ubi5zZW5kKEpTT04uc3RyaW5naWZ5KHttZXRhOiAicG9uZyJ9KSksIDIwMDAwKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gY29ubjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGFsZXJ0KCJZb3UgYXJlIGEgZnVja2luZyBsb29zZXIsIHlvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHdlYnNvY2tldHMiKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgc2V0RXhpc3RpbmdDaGF0KGNvbnRhY3RJdGVtKSB7CiAgICAgICAgICAgIHRoaXMuY2hhdCA9IGNvbnRhY3RJdGVtOwoKICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhcGkuZ2V0KCdnZXRfbWVzc2FnZXMvJyArIGNvbnRhY3RJdGVtLmNoYXRfaWQpOwogICAgICAgICAgICBjb25zdCB0aGF0ID0gdGhpczsKICAgICAgICAgICAgdGhpcy5tZXNzYWdlcyA9IFtdOwoKICAgICAgICAgICAgcmVzcG9uc2UudGhlbihkYXRhID0+IHsKICAgICAgICAgICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQgfHwgZGF0YS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBkYXRhLmZvckVhY2goaXRlbSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQubWVzc2FnZXMucHVzaChpdGVtKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgc2V0TmV3Q2hhdChyZWNpcGllbnROYW1lKSB7CiAgICAgICAgICAgIHRoaXMuY2hhdCA9IHsKICAgICAgICAgICAgICAgIGNoYXRfaWQ6IG51bGwsCiAgICAgICAgICAgICAgICBuYW1lOiByZWNpcGllbnROYW1lLnVzZXJuYW1lLAogICAgICAgICAgICAgICAgdXNlcm5hbWVzOiBbcmVjaXBpZW50TmFtZS51c2VybmFtZSwgdGhpcy51c2VyRGF0YS51c2VybmFtZV0sCiAgICAgICAgICAgICAgICBhZG1pbjogdGhpcy51c2VyRGF0YS51c2VybmFtZSwKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGhpcy5tZXNzYWdlcyA9IFtdOwogICAgICAgIH0KICAgIH0sCiAgICBjb21wdXRlZDogewogICAgICAgIHVzZXJEYXRhKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5HRVRfVVNFUjsKICAgICAgICB9LAogICAgICAgIGFsbFVzZXJzKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5HRVRfQUxMX1VTRVJTOwogICAgICAgIH0sCiAgICAgICAgbmV3VXNlcnMoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLkdFVF9BTExfVVNFUlMuZmlsdGVyKGl0ZW0gPT4gewogICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0udXNlcm5hbWUgIT09IHRoaXMudXNlckRhdGEudXNlcm5hbWUgJiYKICAgICAgICAgICAgICAgICAgICAodGhpcy51c2VyRGF0YS5jb250YWN0cyA9PSBudWxsID8gdHJ1ZSA6ICF0aGlzLnVzZXJEYXRhLmNvbnRhY3RzLmluY2x1ZGVzKGl0ZW0udXNlcm5hbWUpKQogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9LAp9Cg=="},{"version":3,"sources":["Chat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Chat.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n    <div>\n        <h1>Chat here!</h1>\n        <h3>Logged in as {{ userData.username }}</h3>\n        <div class=\"chatroom-container\">\n            <div class=\"contacts-container\">\n                <h4>My chats:</h4>\n                <!--                а вот список контактов потом дополнится не просто список имен, а еще и есть ли непрочитанные сообщения и все в этом роде-->\n                <p @click=\"setExistingChat(chatItem)\" v-for=\"chatItem in userData.chats\" :key=\"chatItem.chat_id\">{{ chatItem.name }}</p>\n            </div>\n            <div class=\"chat-screen\">\n                <div v-for=\"message in messages\" :key=\"message.text\" class=\"message-container\">\n                    <p class=\"message-sender\">From: {{ message.sender }}</p>\n                    <p class=\"message-text\">{{ message.text }}</p>\n                </div>\n                <div class=\"input-container\">\n                    <input class=\"message-input\" type=\"text\" v-model=\"messageText\">\n                    <button @click=\"sendMessage\">Send</button>\n                </div>\n            </div>\n            <div class=\"contacts-container\">\n                <h4>All users:</h4>\n                <p @click=\"setNewChat(contactItem)\" v-for=\"contactItem in newUsers\" :key=\"contactItem.username\">{{ contactItem.username }}</p>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import api from \"../api/api\";\n\n    export default {\n        name: \"Chat\",\n        data() {\n            return {\n                chat: {\n                    chat_id: null,\n                    name: '',\n                    usernames: [],\n                    admin: '',\n                },\n                messages: [],\n                messageText: '',\n                connection: {},\n            }\n        },\n        created() {\n            this.$store.dispatch(\"LOAD_USER_DATA\");\n            this.$store.dispatch(\"LOAD_ALL_USERS\");\n            this.connection = this.setConnection();\n        },\n        methods: {\n            sendMessage() {\n                const message = {\n                    sender: this.userData.username,\n                    chat_id: this.chat.chat_id,\n                    meta: this.chat.name,\n                    date: Date.now(),\n                    state: 0,\n                    text: this.messageText,\n                    attached_file_path: null,\n                };\n                console.log(\"Message to send: \", message);\n                this.connection.send(JSON.stringify(message));\n                this.messageText = \"\";\n                this.messages.push(message);\n            },\n            setConnection() {\n                const that = this;\n                if (window[\"WebSocket\"]) {\n                    const conn = new WebSocket(\"ws://localhost:2222/connect\");\n                    conn.onclose = function () {\n                        console.log(\"Connection closed\");\n                    };\n                    conn.onmessage = function (evt) {\n                        console.log(\"Got message: \", evt);\n                        let messageBody = JSON.parse(evt.data);\n                        console.log(\"Body: \", messageBody);\n                        that.messages.push(messageBody);\n                    };\n                    let timerId = setInterval(() => conn.send(JSON.stringify({meta: \"pong\"})), 20000);\n\n                    return conn;\n                }\n                else {\n                    alert(\"You are a fucking looser, your browser does not support websockets\");\n                }\n            },\n            setExistingChat(contactItem) {\n                this.chat = contactItem;\n\n                const response = api.get('get_messages/' + contactItem.chat_id);\n                const that = this;\n                this.messages = [];\n\n                response.then(data => {\n                    if (data === undefined || data.length === 0) {\n                        return;\n                    }\n                    data.forEach(item => {\n                            that.messages.push(item)\n                        }\n                    );\n                });\n            },\n            setNewChat(recipientName) {\n                this.chat = {\n                    chat_id: null,\n                    name: recipientName.username,\n                    usernames: [recipientName.username, this.userData.username],\n                    admin: this.userData.username,\n                };\n                this.messages = [];\n            }\n        },\n        computed: {\n            userData() {\n                return this.$store.getters.GET_USER;\n            },\n            allUsers() {\n                return this.$store.getters.GET_ALL_USERS;\n            },\n            newUsers() {\n                return this.$store.getters.GET_ALL_USERS.filter(item => {\n                    return item.username !== this.userData.username &&\n                        (this.userData.contacts == null ? true : !this.userData.contacts.includes(item.username))\n                });\n            }\n        },\n    }\n</script>\n\n<style scoped>\n    p {\n        padding: 0;\n        margin: 0;\n    }\n\n    .chatroom-container {\n        width: 90%;\n        margin: 0 auto;\n        display: flex;\n        flex-direction: row;\n        justify-content: center;\n    }\n    .contacts-container {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        justify-content: start;\n        border: solid blue 3px;\n        padding: 2em;\n    }\n    .chat-screen {\n        position: relative;\n        min-width: 15em;\n        display: flex;\n        margin: 0 1em;\n        flex-direction: column;\n        justify-content: start;\n        border: solid blue 3px;\n        padding: 1em 0.7em 4em;\n    }\n    .input-container {\n        position: absolute;\n        bottom: 1em;\n        height: fit-content;\n        display: flex;\n        flex-direction: row;\n        justify-content: start;\n        padding: 0.5em;\n        border: solid green 1px;\n        max-width: 90%;\n    }\n\n    .message-input {\n        max-width: 65%;\n    }\n\n    .contact-container {\n        border: green solid 1px;\n        border-radius: 7px;\n    }\n\n    .message-container {\n        text-align: left;\n        background-color: lightblue;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        padding: 10px;\n        margin: 0 0 5px 0;\n    }\n\n    .message-text {\n        border: solid 2px lightgreen;\n        background-color: white;\n        padding: 5px;\n    }\n\n    .message-sender {\n        margin: 10px;\n    }\n\n</style>"]}]}