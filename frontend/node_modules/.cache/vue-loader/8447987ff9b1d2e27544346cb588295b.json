{"remainingRequest":"/home/gregory/Desktop/project_chat/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/gregory/Desktop/project_chat/frontend/src/pages/Chat.vue?vue&type=style&index=0&id=3cc788c8&scoped=true&lang=css&","dependencies":[{"path":"/home/gregory/Desktop/project_chat/frontend/src/pages/Chat.vue","mtime":1586807473743},{"path":"/home/gregory/Desktop/project_chat/frontend/node_modules/css-loader/dist/cjs.js","mtime":1586725072215},{"path":"/home/gregory/Desktop/project_chat/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1586725071684},{"path":"/home/gregory/Desktop/project_chat/frontend/node_modules/postcss-loader/src/index.js","mtime":1586725072251},{"path":"/home/gregory/Desktop/project_chat/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1586725072215},{"path":"/home/gregory/Desktop/project_chat/frontend/node_modules/vue-loader/lib/index.js","mtime":1586725071680}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCnAgewogICAgcGFkZGluZzogMDsKICAgIG1hcmdpbjogMDsKfQoKLm1haW4taW5mby1idXR0b24gewogICAgcG9zaXRpb246IGZpeGVkOwogICAgdG9wOiAxZW07CiAgICBsZWZ0OiAxZW07Cn0KCi5jaGF0cm9vbS1jb250YWluZXIgewogICAgbWFyZ2luOiAwIGF1dG87Cn0KLmNvbnRhY3RzLWNvbnRhaW5lciB7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7CiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDsKICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtc3RhcnQ7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZkNDZmOwogICAgcGFkZGluZzogMmVtOwp9Ci5jaGF0LXNjcmVlbiB7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICBtaW4td2lkdGg6IDMwZW07CiAgICBkaXNwbGF5OiBmbGV4OwogICAgbWFyZ2luOiAwIGF1dG87CiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAganVzdGlmeS1jb250ZW50OiBzdGFydDsKICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlc21va2U7CiAgICBib3gtc2hhZG93OiAwLjVlbSAwLjVlbSA0ZW0gcmdiYSgwLCAwLCAwLCAuNSk7CiAgICBwYWRkaW5nOiAxZW0gMC43ZW0gNGVtOwp9Ci5jaGF0LWl0ZW0gewogICAgZGlzcGxheTogZmxleDsKICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgIGhlaWdodDogZml0LWNvbnRlbnQ7Cn0KCi5pbnB1dC1jb250YWluZXIgewogICAgcG9zaXRpb246IGZpeGVkOwogICAgYm90dG9tOiAxZW07CiAgICBoZWlnaHQ6IGZpdC1jb250ZW50OwogICAgZGlzcGxheTogZmxleDsKICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDsKICAgIHBhZGRpbmc6IDAuNWVtOwogICAgYm9yZGVyOiBzb2xpZCBncmVlbiAxcHg7CiAgICB3aWR0aDogOTUlCn0KCi5tZXNzYWdlLWlucHV0IHsKICAgIG1heC13aWR0aDogMTAwJTsKICAgIHdpZHRoOiA3NSU7Cn0KCi5zaWRlYmFyLWNvbnRlbnQgewogICAgZGlzcGxheTogZmxleDsKICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDsKfQoKLmFjdGl2ZS1jaGF0LWNvbnRhaW5lciB7CiAgICBkaXNwbGF5OiBibG9jazsKfQoKLmNvbnRhY3QtY29udGFpbmVyIHsKICAgIGJvcmRlcjogZ3JlZW4gc29saWQgMXB4OwogICAgYm9yZGVyLXJhZGl1czogN3B4Owp9CgoubWVzc2FnZS1jb250YWluZXIgewogICAgZGlzcGxheTogZmxleDsKICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDsKICAgIHBhZGRpbmc6IDAuNWVtOwogICAgbWFyZ2luOiAwIDAgNXB4IDA7CiAgICBtYXgtd2lkdGg6IDU1JTsKICAgIHdpZHRoOiBmaXQtY29udGVudDsKfQoKLm1lc3NhZ2UtaGVhZGVyIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBmbGV4LWRpcmVjdGlvbjogcm93OwogICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwogICAgd2lkdGg6IGZpdC1jb250ZW50OwogICAgYWxpZ24tY29udGVudDogZmxleC1lbmQ7CiAgICBhbGlnbi1pdGVtczogZmxleC1lbmQ7Cn0KLm1lc3NhZ2Utc2VuZGVyIHsKICAgIHBhZGRpbmctcmlnaHQ6IDF2dzsKfQoKLnJpZ2h0LW1lc3NhZ2UgewogICAgYWxpZ24tc2VsZjogZmxleC1lbmQ7Cn0KCi5sZWZ0LW1lc3NhZ2Ugewp9CgoucmlnaHQtbWVzc2FnZSBwIHsKICAgIHRleHQtYWxpZ246IHJpZ2h0Owp9CgoucmlnaHQtbWVzc2FnZSAubWVzc2FnZS10ZXh0IHsKICAgIG1hcmdpbi1sZWZ0OiBhdXRvOwp9CgoKLmxlZnQtbWVzc2FnZSBwIHsKICAgIHRleHQtYWxpZ246IGxlZnQ7Cn0KCi5sZWZ0LW1lc3NhZ2UgLm1lc3NhZ2UtdGV4dCB7CiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87Cn0KCi5tZXNzYWdlLXRleHQgewogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZDQ2ZjsKICAgIHBhZGRpbmc6IDVweDsKICAgIHdpZHRoOiAxMDAlOwp9CgoKQG1lZGlhIG9ubHkgc2NyZWVuCmFuZCAobWF4LXdpZHRoIDogMzc1cHgpCmFuZCAobWF4LWhlaWdodCA6IDY2N3B4KQphbmQgKC13ZWJraXQtZGV2aWNlLXBpeGVsLXJhdGlvIDogMiksCm9ubHkgc2NyZWVuCmFuZCAobWF4LXdpZHRoIDogMzc1cHgpCmFuZCAobWF4LWhlaWdodCA6IDgxMnB4KSwKb25seSBzY3JlZW4KYW5kIChtYXgtd2lkdGggOiA0MTRweCkKYW5kIChtYXgtaGVpZ2h0IDogNzM2cHgpCmFuZCAoLXdlYmtpdC1kZXZpY2UtcGl4ZWwtcmF0aW8gOiAzKSwKb25seSBzY3JlZW4KYW5kIChtYXgtd2lkdGggOiA0MTFweCkKYW5kIChtYXgtaGVpZ2h0IDogNzMxcHgpLApvbmx5IHNjcmVlbgphbmQgKG1heC13aWR0aCA6IDQxMXB4KQphbmQgKG1heC1oZWlnaHQgOiA4MjNweCkgewogICAgLmNoYXQtc2NyZWVuIHsKICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICBtYXJnaW46IDAgYXV0bzsKICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAgICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGVzbW9rZTsKICAgICAgICBib3gtc2hhZG93OiAwLjVlbSAwLjVlbSA0ZW0gcmdiYSgwLCAwLCAwLCAuNSk7CiAgICAgICAgcGFkZGluZzogMWVtIDAuN2VtIDRlbTsKICAgIH0KfQoKCg=="},{"version":3,"sources":["Chat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6JA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Chat.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n    <div>\n        <h3>{{ chat.name }}</h3>\n        <div class=\"chatroom-container\">\n            <div class=\"sidebar-container\">\n                <b-button class=\"main-info-button\" size=\"lg\" v-b-toggle.sidebar-1 variant=\"primary\"><b-icon-chat-dots></b-icon-chat-dots></b-button>\n                <b-sidebar id=\"sidebar-1\" :title=\"userData.username\" shadow>\n                    <div class=\"sidebar-content\">\n                        <div class=\"contacts-container\">\n                            <h4>My chats:</h4>\n                            <!--                а вот список контактов потом дополнится не просто список имен, а еще и есть ли непрочитанные сообщения и все в этом роде-->\n                            <p @click=\"setExistingChat(chatItem)\" v-for=\"chatItem in userData.chats\" :key=\"chatItem.chat_id\">{{ chatItem.name }}</p>\n                            <div class=\"chat-item\" @click=\"setExistingChat(chatItem)\" v-for=\"chatItem in userData.chats\" :key=\"chatItem.chat_id\">\n                                <h5>{{ chatItem.name }}</h5>\n                                <div>{{ chatItem.usernames.filter(item => item !== userData.username).join(\", \") }}</div>\n                            </div>\n                        </div>\n                        <div class=\"contacts-container\">\n                            <h4>All users:</h4>\n                            <p @click=\"setNewChat(contactItem)\" v-for=\"contactItem in newUsers\" :key=\"contactItem.username\">{{ contactItem.username }}</p>\n                        </div>\n                    </div>\n                </b-sidebar>\n            </div>\n            <div class=\"chat-screen\">\n                <div v-for=\"message in messages\" :key=\"message.date\" :class=\"(message.sender === userData.username ? 'right-message' : 'left-message') + ' message-container'\">\n                    <div class=\"message-header\">\n                        <div class=\"message-sender\">\n                            {{ message.sender }}\n                        </div>\n                        <div class=\"message-date\"> {{ convertToDatetime(message.date) }} </div>\n                    </div>\n                    <div class=\"message-text\">{{ message.text }}</div>\n                </div>\n                <div class=\"input-container\">\n                    <input class=\"message-input\" type=\"text\" v-model=\"messageText\">\n                    <button @click=\"sendMessage\">Send</button>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</template>\n\n<script>\n    import api from \"../api/api\";\n\n    export default {\n        name: \"Chat\",\n        data() {\n            return {\n                chat: {\n                    chat_id: null,\n                    name: '',\n                    usernames: [],\n                    admin: '',\n                },\n                messages: [],\n                messageText: '',\n                connection: {},\n            }\n        },\n        created() {\n            this.$store.dispatch(\"LOAD_USER_DATA\");\n            this.$store.dispatch(\"LOAD_ALL_USERS\");\n            this.connection = this.setConnection();\n        },\n        methods: {\n            sendMessage() {\n                const message = {\n                    sender: this.userData.username,\n                    chat_id: this.chat.chat_id,\n                    meta: this.chat.name,\n                    date: Date.now(),\n                    state: 0,\n                    text: this.messageText,\n                    attached_file_path: null,\n                };\n                console.log(\"Message to send: \", message);\n                this.connection.send(JSON.stringify(message));\n                this.messageText = \"\";\n                this.messages.push(message);\n            },\n            setConnection() {\n                const that = this;\n                if (window[\"WebSocket\"]) {\n                    const conn = new WebSocket(\"ws://localhost:2222/ws/connect\");\n                    conn.onclose = function () {\n                        console.log(\"Connection closed\");\n                    };\n                    conn.onmessage = function (evt) {\n                        console.log(\"Got message: \", evt);\n                        let messageBody = JSON.parse(evt.data);\n                        console.log(\"Body: \", messageBody);\n                        that.messages.push(messageBody);\n                    };\n                    let timerId = setInterval(() => conn.send(JSON.stringify({meta: \"pong\"})), 20000);\n\n                    return conn;\n                }\n                else {\n                    alert(\"You are a fucking looser, your browser does not support websockets\");\n                }\n            },\n            setExistingChat(contactItem) {\n                this.chat = contactItem;\n\n                const response = api.get('get_messages/' + contactItem.chat_id);\n                const that = this;\n                this.messages = [];\n\n                response.then(data => {\n                    if (data === undefined || data.length === 0) {\n                        return;\n                    }\n                    data.forEach(item => {\n                            that.messages.push(item)\n                        }\n                    );\n                });\n            },\n            setNewChat(recipientName) {\n                this.chat = {\n                    chat_id: null,\n                    name: recipientName.username,\n                    usernames: [recipientName.username, this.userData.username],\n                    admin: this.userData.username,\n                };\n                this.messages = [];\n            },\n            convertToDatetime(timestamp) {\n                const date = new Date(timestamp);\n                const hours = date.getHours();\n                const minutes = \"0\" + date.getMinutes();\n                const seconds = \"0\" + date.getSeconds();\n\n                return hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n            }\n        },\n        computed: {\n            userData() {\n                return this.$store.getters.GET_USER;\n            },\n            allUsers() {\n                return this.$store.getters.GET_ALL_USERS;\n            },\n            newUsers() {\n                return this.$store.getters.GET_ALL_USERS.filter(item => {\n                    return item.username !== this.userData.username &&\n                        (this.userData.contacts == null ? true : !this.userData.contacts.includes(item.username))\n                });\n            }\n        },\n    }\n</script>\n\n<style scoped>\n    p {\n        padding: 0;\n        margin: 0;\n    }\n\n    .main-info-button {\n        position: fixed;\n        top: 1em;\n        left: 1em;\n    }\n\n    .chatroom-container {\n        margin: 0 auto;\n    }\n    .contacts-container {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        justify-content: start;\n        align-items: flex-start;\n        align-content: flex-start;\n        background-color: #ffd46f;\n        padding: 2em;\n    }\n    .chat-screen {\n        position: relative;\n        min-width: 30em;\n        display: flex;\n        margin: 0 auto;\n        flex-direction: column;\n        justify-content: start;\n        background-color: whitesmoke;\n        box-shadow: 0.5em 0.5em 4em rgba(0, 0, 0, .5);\n        padding: 1em 0.7em 4em;\n    }\n    .chat-item {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        height: fit-content;\n    }\n\n    .input-container {\n        position: fixed;\n        bottom: 1em;\n        height: fit-content;\n        display: flex;\n        flex-direction: row;\n        justify-content: space-around;\n        padding: 0.5em;\n        border: solid green 1px;\n        width: 95%\n    }\n\n    .message-input {\n        max-width: 100%;\n        width: 75%;\n    }\n\n    .sidebar-content {\n        display: flex;\n        flex-direction: column;\n        justify-content: space-around;\n    }\n\n    .active-chat-container {\n        display: block;\n    }\n\n    .contact-container {\n        border: green solid 1px;\n        border-radius: 7px;\n    }\n\n    .message-container {\n        display: flex;\n        flex-direction: column;\n        justify-content: space-around;\n        padding: 0.5em;\n        margin: 0 0 5px 0;\n        max-width: 55%;\n        width: fit-content;\n    }\n\n    .message-header {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        width: fit-content;\n        align-content: flex-end;\n        align-items: flex-end;\n    }\n    .message-sender {\n        padding-right: 1vw;\n    }\n\n    .right-message {\n        align-self: flex-end;\n    }\n\n    .left-message {\n    }\n\n    .right-message p {\n        text-align: right;\n    }\n\n    .right-message .message-text {\n        margin-left: auto;\n    }\n\n\n    .left-message p {\n        text-align: left;\n    }\n\n    .left-message .message-text {\n        margin-right: auto;\n    }\n\n    .message-text {\n        background-color: #ffd46f;\n        padding: 5px;\n        width: 100%;\n    }\n\n\n    @media only screen\n    and (max-width : 375px)\n    and (max-height : 667px)\n    and (-webkit-device-pixel-ratio : 2),\n    only screen\n    and (max-width : 375px)\n    and (max-height : 812px),\n    only screen\n    and (max-width : 414px)\n    and (max-height : 736px)\n    and (-webkit-device-pixel-ratio : 3),\n    only screen\n    and (max-width : 411px)\n    and (max-height : 731px),\n    only screen\n    and (max-width : 411px)\n    and (max-height : 823px) {\n        .chat-screen {\n            position: relative;\n            width: 100%;\n            display: flex;\n            margin: 0 auto;\n            flex-direction: column;\n            justify-content: start;\n            background-color: whitesmoke;\n            box-shadow: 0.5em 0.5em 4em rgba(0, 0, 0, .5);\n            padding: 1em 0.7em 4em;\n        }\n    }\n\n\n</style>"]}]}