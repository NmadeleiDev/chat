{"remainingRequest":"/home/gregory/Desktop/project_chat/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/gregory/Desktop/project_chat/frontend/src/pages/Chat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/gregory/Desktop/project_chat/frontend/src/pages/Chat.vue","mtime":1586808020986},{"path":"/home/gregory/Desktop/project_chat/frontend/node_modules/babel-loader/lib/index.js","mtime":1586725072215},{"path":"/home/gregory/Desktop/project_chat/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1586725072215},{"path":"/home/gregory/Desktop/project_chat/frontend/node_modules/vue-loader/lib/index.js","mtime":1586725071680}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBhcGkgZnJvbSAiLi4vYXBpL2FwaSI7CgpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOiAiQ2hhdCIsCiAgICBkYXRhKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGNoYXQ6IHsKICAgICAgICAgICAgICAgIGNoYXRfaWQ6IG51bGwsCiAgICAgICAgICAgICAgICBuYW1lOiAnJywKICAgICAgICAgICAgICAgIHVzZXJuYW1lczogW10sCiAgICAgICAgICAgICAgICBhZG1pbjogJycsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG1lc3NhZ2VzOiBbXSwKICAgICAgICAgICAgbWVzc2FnZVRleHQ6ICcnLAogICAgICAgICAgICBjb25uZWN0aW9uOiB7fSwKICAgICAgICB9CiAgICB9LAogICAgY3JlYXRlZCgpIHsKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgiTE9BRF9VU0VSX0RBVEEiKTsKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgiTE9BRF9BTExfVVNFUlMiKTsKICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSB0aGlzLnNldENvbm5lY3Rpb24oKTsKICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgc2VuZE1lc3NhZ2UoKSB7CiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB7CiAgICAgICAgICAgICAgICBzZW5kZXI6IHRoaXMudXNlckRhdGEudXNlcm5hbWUsCiAgICAgICAgICAgICAgICBjaGF0X2lkOiB0aGlzLmNoYXQuY2hhdF9pZCwKICAgICAgICAgICAgICAgIG1ldGE6IHRoaXMuY2hhdC5uYW1lLAogICAgICAgICAgICAgICAgZGF0ZTogRGF0ZS5ub3coKSwKICAgICAgICAgICAgICAgIHN0YXRlOiAwLAogICAgICAgICAgICAgICAgdGV4dDogdGhpcy5tZXNzYWdlVGV4dCwKICAgICAgICAgICAgICAgIGF0dGFjaGVkX2ZpbGVfcGF0aDogbnVsbCwKICAgICAgICAgICAgfTsKICAgICAgICAgICAgY29uc29sZS5sb2coIk1lc3NhZ2UgdG8gc2VuZDogIiwgbWVzc2FnZSk7CiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5zZW5kKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTsKICAgICAgICAgICAgdGhpcy5tZXNzYWdlVGV4dCA9ICIiOwogICAgICAgICAgICB0aGlzLm1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7CiAgICAgICAgfSwKICAgICAgICBzZXRDb25uZWN0aW9uKCkgewogICAgICAgICAgICBjb25zdCB0aGF0ID0gdGhpczsKICAgICAgICAgICAgaWYgKHdpbmRvd1siV2ViU29ja2V0Il0pIHsKICAgICAgICAgICAgICAgIGNvbnN0IGNvbm4gPSBuZXcgV2ViU29ja2V0KCJ3czovLyIgKyB3aW5kb3cubG9jYXRpb24uaG9zdCArICIvd3MvY29ubmVjdCIpOwogICAgICAgICAgICAgICAgY29ubi5vbmNsb3NlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJDb25uZWN0aW9uIGNsb3NlZCIpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGNvbm4ub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2dCkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJHb3QgbWVzc2FnZTogIiwgZXZ0KTsKICAgICAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZUJvZHkgPSBKU09OLnBhcnNlKGV2dC5kYXRhKTsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiQm9keTogIiwgbWVzc2FnZUJvZHkpOwogICAgICAgICAgICAgICAgICAgIHRoYXQubWVzc2FnZXMucHVzaChtZXNzYWdlQm9keSk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgbGV0IHRpbWVySWQgPSBzZXRJbnRlcnZhbCgoKSA9PiBjb25uLnNlbmQoSlNPTi5zdHJpbmdpZnkoe21ldGE6ICJwb25nIn0pKSwgMjAwMDApOwoKICAgICAgICAgICAgICAgIHJldHVybiBjb25uOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgYWxlcnQoIllvdSBhcmUgYSBmdWNraW5nIGxvb3NlciwgeW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgd2Vic29ja2V0cyIpOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBzZXRFeGlzdGluZ0NoYXQoY29udGFjdEl0ZW0pIHsKICAgICAgICAgICAgdGhpcy5jaGF0ID0gY29udGFjdEl0ZW07CgogICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGFwaS5nZXQoJ2dldF9tZXNzYWdlcy8nICsgY29udGFjdEl0ZW0uY2hhdF9pZCk7CiAgICAgICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzOwogICAgICAgICAgICB0aGlzLm1lc3NhZ2VzID0gW107CgogICAgICAgICAgICByZXNwb25zZS50aGVuKGRhdGEgPT4gewogICAgICAgICAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCB8fCBkYXRhLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGRhdGEuZm9yRWFjaChpdGVtID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5tZXNzYWdlcy5wdXNoKGl0ZW0pCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICBzZXROZXdDaGF0KHJlY2lwaWVudE5hbWUpIHsKICAgICAgICAgICAgdGhpcy5jaGF0ID0gewogICAgICAgICAgICAgICAgY2hhdF9pZDogbnVsbCwKICAgICAgICAgICAgICAgIG5hbWU6IHJlY2lwaWVudE5hbWUudXNlcm5hbWUsCiAgICAgICAgICAgICAgICB1c2VybmFtZXM6IFtyZWNpcGllbnROYW1lLnVzZXJuYW1lLCB0aGlzLnVzZXJEYXRhLnVzZXJuYW1lXSwKICAgICAgICAgICAgICAgIGFkbWluOiB0aGlzLnVzZXJEYXRhLnVzZXJuYW1lLAogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLm1lc3NhZ2VzID0gW107CiAgICAgICAgfSwKICAgICAgICBjb252ZXJ0VG9EYXRldGltZSh0aW1lc3RhbXApIHsKICAgICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRpbWVzdGFtcCk7CiAgICAgICAgICAgIGNvbnN0IGhvdXJzID0gZGF0ZS5nZXRIb3VycygpOwogICAgICAgICAgICBjb25zdCBtaW51dGVzID0gIjAiICsgZGF0ZS5nZXRNaW51dGVzKCk7CiAgICAgICAgICAgIGNvbnN0IHNlY29uZHMgPSAiMCIgKyBkYXRlLmdldFNlY29uZHMoKTsKCiAgICAgICAgICAgIHJldHVybiBob3VycyArICc6JyArIG1pbnV0ZXMuc3Vic3RyKC0yKSArICc6JyArIHNlY29uZHMuc3Vic3RyKC0yKTsKICAgICAgICB9CiAgICB9LAogICAgY29tcHV0ZWQ6IHsKICAgICAgICB1c2VyRGF0YSgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMuR0VUX1VTRVI7CiAgICAgICAgfSwKICAgICAgICBhbGxVc2VycygpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMuR0VUX0FMTF9VU0VSUzsKICAgICAgICB9LAogICAgICAgIG5ld1VzZXJzKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5HRVRfQUxMX1VTRVJTLmZpbHRlcihpdGVtID0+IHsKICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLnVzZXJuYW1lICE9PSB0aGlzLnVzZXJEYXRhLnVzZXJuYW1lICYmCiAgICAgICAgICAgICAgICAgICAgKHRoaXMudXNlckRhdGEuY29udGFjdHMgPT0gbnVsbCA/IHRydWUgOiAhdGhpcy51c2VyRGF0YS5jb250YWN0cy5pbmNsdWRlcyhpdGVtLnVzZXJuYW1lKSkKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfSwKfQo="},{"version":3,"sources":["Chat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Chat.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n    <div>\n        <h3>{{ chat.name }}</h3>\n        <div class=\"chatroom-container\">\n            <div class=\"sidebar-container\">\n                <b-button class=\"main-info-button\" size=\"lg\" v-b-toggle.sidebar-1 variant=\"primary\"><b-icon-chat-dots></b-icon-chat-dots></b-button>\n                <b-sidebar id=\"sidebar-1\" :title=\"userData.username\" shadow>\n                    <div class=\"sidebar-content\">\n                        <div class=\"contacts-container\">\n                            <h4>My chats:</h4>\n                            <!--                а вот список контактов потом дополнится не просто список имен, а еще и есть ли непрочитанные сообщения и все в этом роде-->\n                            <p @click=\"setExistingChat(chatItem)\" v-for=\"chatItem in userData.chats\" :key=\"chatItem.chat_id\">{{ chatItem.name }}</p>\n                            <div class=\"chat-item\" @click=\"setExistingChat(chatItem)\" v-for=\"chatItem in userData.chats\" :key=\"chatItem.chat_id\">\n                                <h5>{{ chatItem.name }}</h5>\n                                <div>{{ chatItem.usernames.filter(item => item !== userData.username).join(\", \") }}</div>\n                            </div>\n                        </div>\n                        <div class=\"contacts-container\">\n                            <h4>All users:</h4>\n                            <p @click=\"setNewChat(contactItem)\" v-for=\"contactItem in newUsers\" :key=\"contactItem.username\">{{ contactItem.username }}</p>\n                        </div>\n                    </div>\n                </b-sidebar>\n            </div>\n            <div class=\"chat-screen\">\n                <div v-for=\"message in messages\" :key=\"message.date\" :class=\"(message.sender === userData.username ? 'right-message' : 'left-message') + ' message-container'\">\n                    <div class=\"message-header\">\n                        <div class=\"message-sender\">\n                            {{ message.sender }}\n                        </div>\n                        <div class=\"message-date\"> {{ convertToDatetime(message.date) }} </div>\n                    </div>\n                    <div class=\"message-text\">{{ message.text }}</div>\n                </div>\n                <div class=\"input-container\">\n                    <input class=\"message-input\" type=\"text\" v-model=\"messageText\">\n                    <button @click=\"sendMessage\">Send</button>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</template>\n\n<script>\n    import api from \"../api/api\";\n\n    export default {\n        name: \"Chat\",\n        data() {\n            return {\n                chat: {\n                    chat_id: null,\n                    name: '',\n                    usernames: [],\n                    admin: '',\n                },\n                messages: [],\n                messageText: '',\n                connection: {},\n            }\n        },\n        created() {\n            this.$store.dispatch(\"LOAD_USER_DATA\");\n            this.$store.dispatch(\"LOAD_ALL_USERS\");\n            this.connection = this.setConnection();\n        },\n        methods: {\n            sendMessage() {\n                const message = {\n                    sender: this.userData.username,\n                    chat_id: this.chat.chat_id,\n                    meta: this.chat.name,\n                    date: Date.now(),\n                    state: 0,\n                    text: this.messageText,\n                    attached_file_path: null,\n                };\n                console.log(\"Message to send: \", message);\n                this.connection.send(JSON.stringify(message));\n                this.messageText = \"\";\n                this.messages.push(message);\n            },\n            setConnection() {\n                const that = this;\n                if (window[\"WebSocket\"]) {\n                    const conn = new WebSocket(\"ws://\" + window.location.host + \"/ws/connect\");\n                    conn.onclose = function () {\n                        console.log(\"Connection closed\");\n                    };\n                    conn.onmessage = function (evt) {\n                        console.log(\"Got message: \", evt);\n                        let messageBody = JSON.parse(evt.data);\n                        console.log(\"Body: \", messageBody);\n                        that.messages.push(messageBody);\n                    };\n                    let timerId = setInterval(() => conn.send(JSON.stringify({meta: \"pong\"})), 20000);\n\n                    return conn;\n                }\n                else {\n                    alert(\"You are a fucking looser, your browser does not support websockets\");\n                }\n            },\n            setExistingChat(contactItem) {\n                this.chat = contactItem;\n\n                const response = api.get('get_messages/' + contactItem.chat_id);\n                const that = this;\n                this.messages = [];\n\n                response.then(data => {\n                    if (data === undefined || data.length === 0) {\n                        return;\n                    }\n                    data.forEach(item => {\n                            that.messages.push(item)\n                        }\n                    );\n                });\n            },\n            setNewChat(recipientName) {\n                this.chat = {\n                    chat_id: null,\n                    name: recipientName.username,\n                    usernames: [recipientName.username, this.userData.username],\n                    admin: this.userData.username,\n                };\n                this.messages = [];\n            },\n            convertToDatetime(timestamp) {\n                const date = new Date(timestamp);\n                const hours = date.getHours();\n                const minutes = \"0\" + date.getMinutes();\n                const seconds = \"0\" + date.getSeconds();\n\n                return hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n            }\n        },\n        computed: {\n            userData() {\n                return this.$store.getters.GET_USER;\n            },\n            allUsers() {\n                return this.$store.getters.GET_ALL_USERS;\n            },\n            newUsers() {\n                return this.$store.getters.GET_ALL_USERS.filter(item => {\n                    return item.username !== this.userData.username &&\n                        (this.userData.contacts == null ? true : !this.userData.contacts.includes(item.username))\n                });\n            }\n        },\n    }\n</script>\n\n<style scoped>\n    p {\n        padding: 0;\n        margin: 0;\n    }\n\n    .main-info-button {\n        position: fixed;\n        top: 1em;\n        left: 1em;\n    }\n\n    .chatroom-container {\n        margin: 0 auto;\n    }\n    .contacts-container {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        justify-content: start;\n        align-items: flex-start;\n        align-content: flex-start;\n        background-color: #ffd46f;\n        padding: 2em;\n    }\n    .chat-screen {\n        position: relative;\n        min-width: 30em;\n        display: flex;\n        margin: 0 auto;\n        flex-direction: column;\n        justify-content: start;\n        background-color: whitesmoke;\n        box-shadow: 0.5em 0.5em 4em rgba(0, 0, 0, .5);\n        padding: 1em 0.7em 4em;\n    }\n    .chat-item {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        height: fit-content;\n    }\n\n    .input-container {\n        position: fixed;\n        bottom: 1em;\n        height: fit-content;\n        display: flex;\n        flex-direction: row;\n        justify-content: space-around;\n        padding: 0.5em;\n        border: solid green 1px;\n        width: 95%\n    }\n\n    .message-input {\n        max-width: 100%;\n        width: 75%;\n    }\n\n    .sidebar-content {\n        display: flex;\n        flex-direction: column;\n        justify-content: space-around;\n    }\n\n    .active-chat-container {\n        display: block;\n    }\n\n    .contact-container {\n        border: green solid 1px;\n        border-radius: 7px;\n    }\n\n    .message-container {\n        display: flex;\n        flex-direction: column;\n        justify-content: space-around;\n        padding: 0.5em;\n        margin: 0 0 5px 0;\n        max-width: 55%;\n        width: fit-content;\n    }\n\n    .message-header {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        width: fit-content;\n        align-content: flex-end;\n        align-items: flex-end;\n    }\n    .message-sender {\n        padding-right: 1vw;\n    }\n\n    .right-message {\n        align-self: flex-end;\n    }\n\n    .left-message {\n    }\n\n    .right-message p {\n        text-align: right;\n    }\n\n    .right-message .message-text {\n        margin-left: auto;\n    }\n\n\n    .left-message p {\n        text-align: left;\n    }\n\n    .left-message .message-text {\n        margin-right: auto;\n    }\n\n    .message-text {\n        background-color: #ffd46f;\n        padding: 5px;\n        width: 100%;\n    }\n\n\n    @media only screen\n    and (max-width : 375px)\n    and (max-height : 667px)\n    and (-webkit-device-pixel-ratio : 2),\n    only screen\n    and (max-width : 375px)\n    and (max-height : 812px),\n    only screen\n    and (max-width : 414px)\n    and (max-height : 736px)\n    and (-webkit-device-pixel-ratio : 3),\n    only screen\n    and (max-width : 411px)\n    and (max-height : 731px),\n    only screen\n    and (max-width : 411px)\n    and (max-height : 823px) {\n        .chat-screen {\n            position: relative;\n            width: 100%;\n            display: flex;\n            margin: 0 auto;\n            flex-direction: column;\n            justify-content: start;\n            background-color: whitesmoke;\n            box-shadow: 0.5em 0.5em 4em rgba(0, 0, 0, .5);\n            padding: 1em 0.7em 4em;\n        }\n    }\n\n\n</style>"]}]}